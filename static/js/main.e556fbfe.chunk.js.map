{"version":3,"sources":["LittlePretty.js","App.js","reportWebVitals.js","index.js","util/interact.js"],"names":["LittlePretty","useState","walletAddress","setWallet","setStatus","setMessage","useEffect","a","buildMerkleTree","loadTotalSupply","totalSupply","getCurrentWalletConnected","address","bootstrap","mintPresses","mint","connectWalletPressed","connectWallet","walletResponse","status","id","onClick","length","String","substring","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","require","config","alchemyKey","process","console","log","contractAddress","web3","createAlchemyWeb3","contractABI","keccak256","MerkleTree","allower","toLowerCase","map","item","littlePrettyContract","eth","Contract","currentConnectWallet","merkleTree","leafNodes","Buffer","concat","from","replace","methods","call","window","ethereum","request","method","addresses","message","totalCostWei","cost","totalGasLimit","gasLimit","getMerkleProof","proof","send","to","value","receipt","index","indexOf","hexProof","getHexProof","sortPairs","getRoot"],"mappings":"4tTA8DeA,EApDM,WAAM,MAEUC,mBAAS,IAFnB,mBAElBC,EAFkB,KAEHC,EAFG,OAGHF,mBAAS,IAAtBG,EAHgB,sBAIFH,mBAAS,iCAAvBI,EAJgB,oBASzBC,qBAAU,WAAM,4CACd,gCAAAC,EAAA,sEACQC,cADR,uBAE4BC,cAF5B,cAEQC,EAFR,OAGEL,EAAWK,GAHb,SAI0BC,cAJ1B,gBAISC,EAJT,EAISA,QACPT,EAAUS,GALZ,6CADc,uBAAC,WAAD,wBAQdC,KACC,IAEH,IAAMC,EAAW,uCAAG,sBAAAP,EAAA,sEACZQ,cADY,2CAAH,qDAIXC,EAAoB,uCAAG,4BAAAT,EAAA,sEACEU,cADF,OACrBC,EADqB,OAE3Bd,EAAUc,EAAeC,QACzBhB,EAAUe,EAAeN,SAHE,2CAAH,qDAO1B,OACE,sBAAKQ,GAAG,YAAR,UAEE,wBAAQA,GAAG,eAAeC,QAASL,EAAnC,SACGd,EAAcoB,OAAS,EACtB,cACAC,OAAOrB,GAAesB,UAAU,EAAG,GACnC,MACAD,OAAOrB,GAAesB,UAAU,IAEhC,oDAIJ,wBAAQJ,GAAG,aAAaC,QAASP,EAAjC,SACI,8C,OC7CKW,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACA,cAAC,EAAD,OCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,oPChBAc,EAAQ,KAAUC,SAClB,IAAMC,EAAaC,sEACnBC,QAAQC,IAAI,aAAcH,GAC1B,IAAMI,EAAkB,6CAElBC,GAAOC,EADiBR,EAAQ,KAA9BQ,mBACuBN,GACzBO,EAAcT,EAAQ,KACtBU,EAAYV,EAAQ,KAClBW,EAAeX,EAAQ,KAAvBW,WAyBFC,EAvBc,CAChB,6CAA6CC,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,cAC7C,6CAA6CA,eAGrBC,KAAI,SAACC,GAAD,OAAUA,KAC1CX,QAAQC,IAAI,UAAWO,GAGhB,IAAMI,EAAuB,IAAIT,EAAKU,IAAIC,SAC7CT,EACAH,GAGAa,EAAuB,GAEvBC,EAAa,KACXC,EAAYT,EAAQE,KAAI,SAACC,GAAD,OAC5BL,EACEY,EAAOC,OAAO,CACZD,EAAOE,KAAKT,EAAKU,QAAQ,KAAM,IAAK,aAK7BzD,EAAe,uCAAG,4BAAAF,EAAA,sEACDkD,EAAqBU,QAAQzD,cAAc0D,OAD1C,cACrB1D,EADqB,yBAEpBA,GAFoB,2CAAH,qDAKfO,EAAa,uCAAG,4BAAAV,EAAA,0DAErB8D,OAAOC,SAFc,0CAIOD,OAAOC,SAASC,QAAQ,CAC5CC,OAAQ,wBALK,cAIXC,EAJW,QAQHnD,OAAS,IACnBsC,EAAuBa,EAAU,IATpB,kBAYV,CACHtD,OAAQ,YACRP,QAAS6D,EAAU,KAdN,yDAiBV,CACH7D,QAAS,GACTO,OAAQ,gBAAQ,KAAIuD,UAnBP,uCAuBrB7B,QAAQC,IAAI,8BAvBS,4EAAH,qDA4BbnC,EAAyB,uCAAG,4BAAAJ,EAAA,0DAEjC8D,OAAOC,SAF0B,0CAILD,OAAOC,SAASC,QAAQ,CAC5CC,OAAQ,iBALiB,aAIvBC,EAJuB,QAQfnD,OAAS,GARM,wBASzBsC,EAAuBa,EAAU,GATR,kBAUlB,CACH7D,QAAS6D,EAAU,GACnBtD,OAAQ,wBAA0BsD,EAAU,KAZvB,iCAelB,CACH7D,QAAS,GACTO,OAAQ,iEAjBa,mFAqBtB,CACHP,QAAS,GACTO,OAAQ,gBAAQ,KAAIuD,UAvBK,yDA2B1B,CACH9D,QAAS,GACTO,OAAQ,wFA7BqB,0DAAH,qDAkCzBJ,EAAI,uCAAG,kCAAAR,EAAA,6DAEL,KACI,MACXoE,EAAepD,OAAOqD,MACtBC,EAAgBtD,OAAOuD,OAE3BjC,QAAQC,IAAI,YAAac,GAPT,SAQEmB,EAAenB,GARjB,UAQZoB,EARY,OAShBnC,QAAQC,IAAI,eAAgBkC,GAER,GAAhBA,EAAM1D,OAXM,oEAeMmC,EAAqBU,QAC1CpD,KAAK,EAAGiE,GACRC,KAAK,CACFH,SAAUD,EACVK,GAAInC,EACJkB,KAAML,EACNuB,MAAOR,IArBK,QAeVS,EAfU,OAwBhBvC,QAAQC,IAAI,UAAWsC,GAxBP,4CAAH,qDA4BXL,EAAc,uCAAG,WAAOnE,GAAP,iBAAAL,EAAA,4DACf8E,EAAQhC,EAAQiC,QAAQ1E,EAAQ0C,gBACxB,GAFO,uBAGfT,QAAQC,IAAI,QAAUlC,EAAU,uBAHjB,kBAIR,IAJQ,cAMf2E,EAAW1B,EAAW2B,YAAY1B,EAAUuB,IAN7B,kBAOZE,GAPY,2CAAH,sDAWP/E,EAAe,uCAAG,sBAAAD,EAAA,sDAC3BsD,EAAa,IAAIT,EAAWU,EAAWX,EAAW,CAC9CsC,WAAW,IAGF5B,EAAW6B,UALG,2CAAH,uD","file":"static/js/main.e556fbfe.chunk.js","sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n  connectWallet,\n  loadTotalSupply,\n  getCurrentWalletConnected,\n  buildMerkleTree,\n  mint,\n} from \"./util/interact.js\";\n\nconst LittlePretty = () => {\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [, setStatus] = useState(\"\");\n  const [, setMessage] = useState(\"No connection to the network.\"); //default message\n  // const [newMessage, setNewMessage] = useState(\"\");\n  // const [newTotalSupply, setNewTotalSupply] = useState(\"\");\n\n  //called only once\n  useEffect(() => {\n    async function bootstrap() {\n      await buildMerkleTree();\n      const totalSupply = await loadTotalSupply();\n      setMessage(totalSupply);\n      const {address} = await getCurrentWalletConnected();\n      setWallet(address);\n    };\n    bootstrap();\n  }, []);\n\n  const mintPresses = async () => {\n    await mint();\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n      {/* <img id=\"logo\" src={alchemylogo}></img> */}\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <button id=\"mintButton\" onClick={mintPresses}>\n          <span>Mint</span>\n      </button>\n    </div>\n  );\n};\n\nexport default LittlePretty;\n","import LittlePretty from './LittlePretty'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <LittlePretty></LittlePretty>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconsole.log(\"alchemyKey\", alchemyKey);\nconst contractAddress = \"0x0f8BfA30f34107aAE592e1929883b8019ADCAcC8\";\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractABI = require(\"../contract-abi.json\");\nconst keccak256 = require('keccak256');\nconst { MerkleTree } = require('merkletreejs');\n\nconst whitelisted = [\n    \"0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65\".toLowerCase(), \n    \"0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc\".toLowerCase(), \n    \"0x976EA74026E726554dB657fA54763abd0C3a0aa9\".toLowerCase(), \n    \"0x14dC79964da2C08b23698B3D3cc7Ca32193d9955\".toLowerCase(),\n    \"0x306093e06726e23EFDfd3FEC7212e511cc7741e5\".toLowerCase(),\n    \"0x0286fd0084fb60d52bb5427fca5338b1645a36d6\".toLowerCase(),\n    \"0x028bcfd9e44f427cf3c302be36976c6c50c34156\".toLowerCase(),\n    \"0x028f0d8c34f06bd45da9ee034aaae7704166f526\".toLowerCase(),\n    \"0x02902df9b34fc71bef4a24560683fab4b7521b61\".toLowerCase(),\n    \"0x029D65430f974968Ecb9c4C183720b31c8B56E3A\".toLowerCase(),\n    \"0x02a3a2fd197d3c21e2f01f9561e3564d3bbcaefd\".toLowerCase(),\n    \"0x02a55b5487a24add301e36e62ad96a4e5f968572\".toLowerCase(),\n    \"0x02a58038158c2679da207e6b239fa7c0336b1e3e\".toLowerCase(),\n    \"0x02a5D16a3c10032898831eB31b81b52bC196B3C8\".toLowerCase(),\n    \"0x02a9bffee3fd13d9dd799d93ddb594abf97a3ac8\".toLowerCase(),\n    \"0x02aa8819f79fc8ee43e8648e232ad2f55d4635eb\".toLowerCase(),\n    \"0x02acda7394deb8c1dec3fb7ac3d330ec62f6384c\".toLowerCase(),\n    \"0x02b5e2b63276c0b16c9c2ef95fe68fd7c067663e\".toLowerCase(),\n    \"0xc1d66392114FDCD2C81a1Ff74597AD4bfA1cF81A\".toLowerCase(),\n    \"0x02b7c2a997113fcb640033fd4228b6215ca69184\".toLowerCase()\n];\n\nconst allower = whitelisted.map((item) => item);\nconsole.log(\"allower\", allower);\n\n\nexport const littlePrettyContract = new web3.eth.Contract(\n    contractABI,\n    contractAddress\n);\n\nlet currentConnectWallet = \"\";\nlet merkleRoot = null;\nlet merkleTree = null;\nconst leafNodes = allower.map((item) =>\n  keccak256(\n    Buffer.concat([\n      Buffer.from(item.replace(\"0x\", \"\"), \"hex\"),\n    ])\n  )\n);\n\nexport const loadTotalSupply = async () => { \n    const totalSupply = await littlePrettyContract.methods.totalSupply().call();\n    return totalSupply;\n};\n\nexport const connectWallet = async () => {\n\n    if (window.ethereum) {\n        try {\n            const addresses = await window.ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n\n            if (addresses.length > 0) {\n                currentConnectWallet = addresses[0];\n            }\n\n            return {\n                status: \"Connected\",\n                address: addresses[0],\n            }\n        } catch (err) {\n            return {\n                address: \"\",\n                status: \"😥 \" + err.message,\n            };\n        }\n    } else {\n        console.log(\"MetaMask is not installed!\");\n        return \n    }\n};\n\nexport const getCurrentWalletConnected = async () => {\n\n    if (window.ethereum) {\n        try {\n            const addresses = await window.ethereum.request({\n                method: \"eth_accounts\"\n            });\n\n            if (addresses.length > 0) {\n                currentConnectWallet = addresses[0]\n                return {\n                    address: addresses[0],\n                    status: \"Connected to address \" + addresses[0]\n                };\n            } else {\n                return {\n                    address: \"\",\n                    status: \"🦊 Connect to Metamask using the top right button.\",\n                };\n            }\n        } catch (err) {\n            return {\n                address: \"\",\n                status: \"😥 \" + err.message,\n            };\n        }\n    } else {\n        return {\n            address: \"\",\n            status: \"🦊 You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n        }\n    }\n};\n\nexport const mint = async () => {\n\n    let cost = 50000000000000000;\n    let gasLimit = 285000;\n    let totalCostWei = String(cost * 1);\n    let totalGasLimit = String(gasLimit * 1);\n\n    console.log(\"address: \", currentConnectWallet);\n    let proof = await getMerkleProof(currentConnectWallet);\n    console.log(\"merkle proof\", proof);\n\n    if (proof.length == 0) {\n        return\n    }\n\n    const receipt = await littlePrettyContract.methods\n    .mint(1, proof)\n    .send({\n        gasLimit: totalGasLimit,\n        to: contractAddress,\n        from: currentConnectWallet,\n        value: totalCostWei\n    })\n\n    console.log(\"receipt\", receipt);\n};\n\n\nconst getMerkleProof = async (address) => {\n    let index = allower.indexOf(address.toLowerCase());\n    if (index < 0) {\n        console.log(\"Addr \" + address + \"is not in whitelist\");\n        return \"\"\n    }\n    let hexProof = merkleTree.getHexProof(leafNodes[index]);\n    return hexProof;\n};\n\n\nexport const buildMerkleTree = async () => {\n    merkleTree = new MerkleTree(leafNodes, keccak256, {\n        sortPairs: true\n    });\n\n    merkleRoot = merkleTree.getRoot();\n};"],"sourceRoot":""}