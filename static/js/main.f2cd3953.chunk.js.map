{"version":3,"sources":["util/interact.js","LittlePretty.js","App.js","index.js"],"names":["require","config","alchemyKey","process","console","log","contractAddress","web3","createAlchemyWeb3","contractABI","littlePrettyContract","eth","Contract","currentConnectWallet","loadTotalSupply","a","methods","totalSupply","call","connectWallet","window","ethereum","request","method","addresses","length","status","address","message","getCurrentWalletConnected","mint","totalCostWei","String","cost","totalGasLimit","gasLimit","send","to","from","value","receipt","LittlePretty","useState","walletAddress","setWallet","setStatus","setMessage","useEffect","mintPresses","connectWalletPressed","walletResponse","id","onClick","substring","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4sTAAAA,EAAQ,KAAUC,SAClB,IAAMC,EAAaC,sEACnBC,QAAQC,IAAI,aAAcH,GAC1B,IAAMI,EAAkB,6CAElBC,GAAOC,EADiBR,EAAQ,KAA9BQ,mBACuBN,GACzBO,EAAcT,EAAQ,KAEfU,EAAuB,IAAIH,EAAKI,IAAIC,SAC7CH,EACAH,GAGAO,EAAuB,GAEdC,EAAe,uCAAG,4BAAAC,EAAA,sEACDL,EAAqBM,QAAQC,cAAcC,OAD1C,cACrBD,EADqB,yBAEpBA,GAFoB,2CAAH,qDAKfE,EAAa,uCAAG,4BAAAJ,EAAA,0DAErBK,OAAOC,SAFc,0CAIOD,OAAOC,SAASC,QAAQ,CAC5CC,OAAQ,wBALK,cAIXC,EAJW,QAQHC,OAAS,IACnBZ,EAAuBW,EAAU,IATpB,kBAYV,CACHE,OAAQ,YACRC,QAASH,EAAU,KAdN,yDAiBV,CACHG,QAAS,GACTD,OAAQ,gBAAQ,KAAIE,UAnBP,uCAuBrBxB,QAAQC,IAAI,8BAvBS,4EAAH,qDA4BbwB,EAAyB,uCAAG,4BAAAd,EAAA,0DAEjCK,OAAOC,SAF0B,0CAILD,OAAOC,SAASC,QAAQ,CAC5CC,OAAQ,iBALiB,aAIvBC,EAJuB,QAQfC,OAAS,GARM,wBASzBZ,EAAuBW,EAAU,GATR,kBAUlB,CACHG,QAASH,EAAU,GACnBE,OAAQ,wBAA0BF,EAAU,KAZvB,iCAelB,CACHG,QAAS,GACTD,OAAQ,iEAjBa,mFAqBtB,CACHC,QAAS,GACTD,OAAQ,gBAAQ,KAAIE,UAvBK,yDA2B1B,CACHD,QAAS,GACTD,OAAQ,wFA7BqB,0DAAH,qDAqCzBI,EAAI,uCAAG,gCAAAf,EAAA,6DAEL,KACI,MACXgB,EAAeC,OAAOC,MACtBC,EAAgBF,OAAOG,OALX,SAOMzB,EAAqBM,QAC1Cc,KAAK,EAAG,CAAC,uEACTM,KAAK,CACFD,SAAUD,EACVG,GAAI/B,EACJgC,KAAMzB,EACN0B,MAAOR,IAbK,OAOVS,EAPU,OAgBhBpC,QAAQC,IAAI,UAAWmC,GAhBP,2CAAH,qD,QC5BFC,EAhDM,WAAM,MAEUC,mBAAS,IAFnB,mBAElBC,EAFkB,KAEHC,EAFG,OAGGF,mBAAS,IAHZ,mBAGVG,GAHU,aAIKH,mBAAS,iCAJd,mBAITI,GAJS,WAOzBC,oBAAS,sBAAC,gCAAAhC,EAAA,sEAEkBD,IAFlB,cAEFG,EAFE,OAGR6B,EAAW7B,GAHH,SAIwBY,IAJxB,gBAIDF,EAJC,EAIDA,QAJC,EAIQD,OAChBkB,EAAUjB,GALF,4CAOP,IAEH,IAAMqB,EAAW,uCAAG,sBAAAjC,EAAA,sEACZe,IADY,2CAAH,qDAIXmB,EAAoB,uCAAG,4BAAAlC,EAAA,sEACEI,IADF,OACrB+B,EADqB,OAE3BL,EAAUK,EAAexB,QACzBkB,EAAUM,EAAevB,SAHE,2CAAH,qDAO1B,OACE,sBAAKwB,GAAG,YAAR,UAEE,wBAAQA,GAAG,eAAeC,QAASH,EAAnC,SACGN,EAAclB,OAAS,EACtB,cACAO,OAAOW,GAAeU,UAAU,EAAG,GACnC,MACArB,OAAOW,GAAeU,UAAU,IAEhC,oDAIJ,wBAAQF,GAAG,aAAaC,QAASJ,EAAjC,SACI,8C,OCxCKM,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACA,cAAC,EAAD,OCDJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f2cd3953.chunk.js","sourcesContent":["require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconsole.log(\"alchemyKey\", alchemyKey);\nconst contractAddress = \"0x0f8BfA30f34107aAE592e1929883b8019ADCAcC8\";\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\nconst contractABI = require(\"../contract-abi.json\");\n\nexport const littlePrettyContract = new web3.eth.Contract(\n    contractABI,\n    contractAddress\n);\n\nlet currentConnectWallet = \"\";\n\nexport const loadTotalSupply = async () => { \n    const totalSupply = await littlePrettyContract.methods.totalSupply().call();\n    return totalSupply;\n};\n\nexport const connectWallet = async () => {\n\n    if (window.ethereum) {\n        try {\n            const addresses = await window.ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n\n            if (addresses.length > 0) {\n                currentConnectWallet = addresses[0];\n            }\n\n            return {\n                status: \"Connected\",\n                address: addresses[0],\n            }\n        } catch (err) {\n            return {\n                address: \"\",\n                status: \"ðŸ˜¥ \" + err.message,\n            };\n        }\n    } else {\n        console.log(\"MetaMask is not installed!\");\n        return \n    }\n};\n\nexport const getCurrentWalletConnected = async () => {\n\n    if (window.ethereum) {\n        try {\n            const addresses = await window.ethereum.request({\n                method: \"eth_accounts\"\n            });\n\n            if (addresses.length > 0) {\n                currentConnectWallet = addresses[0]\n                return {\n                    address: addresses[0],\n                    status: \"Connected to address \" + addresses[0]\n                };\n            } else {\n                return {\n                    address: \"\",\n                    status: \"ðŸ¦Š Connect to Metamask using the top right button.\",\n                };\n            }\n        } catch (err) {\n            return {\n                address: \"\",\n                status: \"ðŸ˜¥ \" + err.message,\n            };\n        }\n    } else {\n        return {\n            address: \"\",\n            status: \"ðŸ¦Š You must install Metamask, a virtual Ethereum wallet, in your browser.\"\n        }\n    }\n};\n\n\n\n\nexport const mint = async () => {\n\n    let cost = 50000000000000000;\n    let gasLimit = 285000;\n    let totalCostWei = String(cost * 1);\n    let totalGasLimit = String(gasLimit * 1);\n\n    const receipt = await littlePrettyContract.methods\n    .mint(1, [\"0xf4ca8532861558e29f9858a3804245bb30f0303cc71e4192e41546237b6ce58b\"])\n    .send({\n        gasLimit: totalGasLimit,\n        to: contractAddress,\n        from: currentConnectWallet,\n        value: totalCostWei\n    })\n\n    console.log(\"receipt\", receipt);\n};\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport {\n  connectWallet,\n  loadTotalSupply,\n  getCurrentWalletConnected,\n  mint,\n} from \"./util/interact.js\";\n\nconst LittlePretty = () => {\n  //state variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [message, setMessage] = useState(\"No connection to the network.\"); //default message\n\n  //called only once\n  useEffect(async () => {\n\n    const totalSupply = await loadTotalSupply();\n    setMessage(totalSupply);\n    const {address, status} = await getCurrentWalletConnected();\n    setWallet(address);\n    \n  }, []);\n\n  const mintPresses = async () => {\n    await mint();\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  //the UI of our component\n  return (\n    <div id=\"container\">\n      {/* <img id=\"logo\" src={alchemylogo}></img> */}\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <button id=\"mintButton\" onClick={mintPresses}>\n          <span>Mint</span>\n      </button>\n    </div>\n  );\n};\n\nexport default LittlePretty;\n","import LittlePretty from './LittlePretty'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <LittlePretty></LittlePretty>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}